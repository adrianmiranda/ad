package  com.ad.ui {	import com.ad.display.Leprechaun;	import com.ad.events.SliderEvent;		import flash.geom.Rectangle;	import flash.events.MouseEvent;	import flash.events.Event;		public class Slider extends Leprechaun {		private var _isDragging:Boolean;		private var _percentage:Number = 0;		private var _bounds:Rectangle;		private var _vars:Object;				public function Slider(vars:Object) {			this._vars = vars;			for (var key:String in this._vars) {				trace('var:', vars[key]);			}			if (super.stage) this.initialize();			else super.addEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage);			super.addEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);		}				protected function onAddedToStage(event:Event):void {			super.removeEventListener(Event.ADDED_TO_STAGE, this.onAddedToStage)			this.initialize();		}				protected function onRemovedFromStage(event:Event):void {			super.removeEventListener(Event.REMOVED_FROM_STAGE, this.onRemovedFromStage);			this.finalize();		}				protected function initialize():void {			var rect:Rectangle = new Rectangle(this._vars.scrubber.x, this._vars.scrubber.y);			rect.width = 0;			rect.height = this._vars.track.height - this._vars.scrubber.height - (this._vars.track.y + this._vars.scrubber.y * 2);						this.bounds = rect;						this._vars.scrubber.x = this.bounds.x;			this._vars.scrubber.y = this.bounds.y;						this._vars.scrubber.buttonMode = true;			this._vars.scrubber.mouseChildren = false;			this._vars.scrubber.addEventListener(MouseEvent.MOUSE_DOWN, this.onStartDrag);						this._vars.arrowUp.buttonMode = true;			this._vars.arrowUp.mouseChildren = false;			this._vars.arrowUp.addEventListener(MouseEvent.MOUSE_DOWN, this.onClickUp);						this._vars.arrowDown.buttonMode = true;			this._vars.arrowDown.mouseChildren = false;			this._vars.arrowDown.addEventListener(MouseEvent.MOUSE_DOWN, this.onClickDown);						this._vars.mask.cacheAsBitmap = true;			this._vars.content.cacheAsBitmap = true;			this._vars.content.mask = this._vars.content;		}				protected function finalize():void {			this._bounds = null;		}				private function onStartDrag(event:MouseEvent):void {			this._isDragging = true;			this._vars.scrubber.startDrag(false, this.bounds);			this._vars.scrubber.addEventListener(Event.ENTER_FRAME, this.onMoveDrag);			super.stage.addEventListener(MouseEvent.MOUSE_UP, this.onStopDrag);		}				private function onStopDrag(event:MouseEvent):void {			this._vars.scrubber.stopDrag();			this._vars.scrubber.removeEventListener(Event.ENTER_FRAME, this.onMoveDrag);			super.stage.removeEventListener(MouseEvent.MOUSE_UP, this.onStopDrag);			if (this._isDragging) {				this._isDragging = false;				super.dispatchEvent(new SliderEvent(SliderEvent.STOP_DRAG));			}		}				private function onMoveDrag(event:Event):void {			this._percentage = (this._vars.scrubber.y - this.bounds.y) / this.bounds.height;			super.dispatchEvent(new SliderEvent(SliderEvent.START_DRAG));			super.dispatchEvent(new SliderEvent(SliderEvent.MOVE_DRAG));		}				private function onClickUp(event:MouseEvent):void {			if (this._vars.content.y < this._vars.mask.y) {				percentage -= 0.05;				//this._vars.content.addEventListener(Event.ENTER_FRAME, this.moveUp);			}		}				private function onClickDown(event:MouseEvent):void {			if ((this._vars.content.y + this._vars.content.height) > (this._vars.mask.y + this._vars.mask.height)) {				percentage += 0.05;				//this._vars.content.addEventListener(Event.ENTER_FRAME, this.moveDown);			}		}				private function moveUp(event:Event):void {			//percentage -= this._vars.speed / 100;			//this._vars.content.y += this._vars.speed;			if (this._vars.content.y > this._vars.mask.y) {				this._vars.content.removeEventListener(Event.ENTER_FRAME, this.moveUp);			}		}				private function moveDown(event:Event):void {			//percentage += this._vars.speed / 100;			//this._vars.content.y -= this._vars.speed;			if ((this._vars.content.y + this._vars.content.height + 10) <= (this._vars.mask.y + this._vars.mask.height)) {				this._vars.content.removeEventListener(Event.ENTER_FRAME, this.moveDown);			}		}				public function get percentage():Number {			return this._percentage;		}				public function set percentage(value:Number):void {			this._percentage = Math.max(0, Math.min(value, 1));			this._vars.scrubber.y = this._bounds.y + (this._bounds.height * this._percentage);			this._vars.content.y = this._bounds.y + (this._bounds.height * this._percentage);			super.dispatchEvent(new SliderEvent(SliderEvent.MOVE_DRAG));		}				public function get bounds():Rectangle {			return this._bounds;		}				public function set bounds(value:Rectangle):void {			this._bounds = value;			this._vars.scrubber.x = this._bounds.x;			this._vars.scrubber.y = this._bounds.y + (this._bounds.height * this._percentage);		}	}}