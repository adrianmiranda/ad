package com.ad.core {	import com.ad.data.View;	import com.ad.data.Header;	import com.ad.data.Language;	import com.ad.utils.Browser;	import com.ad.utils.BranchUtils;	import com.ad.errors.ADError;	import com.ad.events.EventControl;	import com.ad.events.DeeplinkEvent;	import com.asual.swfaddress.SWFAddress;	import com.asual.swfaddress.SWFAddressEvent;		import flash.events.Event;		/**	 * @see http://www.asual.com/swfaddress/docs/pt/as/SWFAddress.html	 * @see http://www.iconomical.com/svnrepos/wdmmg/trunk/src/com/iconomical/wdmmg/proxies/SWFAddressProxy.as	 * @see http://danikgames.com/blog/?tag=as3	 */	public final class Deeplink {		private static var _dispatcher:EventControl;		private static var _history:Array;		private static var _index:int;		private static var _delimiter:String;		private static var _language:Language;		private static var _header:Header;		private static var _lastView:View;		private static var _view:View;		private static var _readings:uint;		private static var _title:String;				public function Deeplink():void {			throw new ADError('Deeplink is a static class. Do not create instance of Deeplink class');		}				private static function validateHeader(header:Header):void {			var error:String = '*Deeplink* Header ';			if (header == null) {				throw new ADError(error + 'missing required');			}			else if (!header.hasViews) {				throw new ADError(error + 'there is no node view');			}		}				private static function onInit(event:SWFAddressEvent):void {			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.INIT, false, false));		}				private static function onChange(event:SWFAddressEvent):void {			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.CHANGE, false, false));		}				private static function onInternalChange(event:SWFAddressEvent):void {			var value:String = BranchUtils.arrange(event.value);			setLanguage(value);			setView(value);			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.INTERNAL_CHANGE, false, false));		}				private static function onExternalChange(event:SWFAddressEvent):void {			var value:String = BranchUtils.arrange(event.value);			var suffix:String = new String();			var lastLanguage:Language = language;			var lastView:View = view;			var typedLanguage:Language = setLanguage(value);			var typedView:View = setView(value);			if (view.id != lastView.id) {				if (value.indexOf(view.id) > -1 || value.indexOf(view.branch) > -1) {					suffix = value.substr(value.indexOf(view.branch) + view.branch.length, value.length);					value = value.split(language.branch).join('');					if (lastView.level == 1) {						setValue(BranchUtils.arrange(language.branch + '/' + view.branch + suffix));						dispatchEvent(new DeeplinkEvent(DeeplinkEvent.EXTERNAL_CHANGE, false, false));						return;					}				}				if (view.id == mistakeView.id) {					var history:Boolean = getHistory();					setHistory(false);					setValue(BranchUtils.arrange(language.branch + '/' + view.branch + suffix));					setHistory(history);				}			}			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.EXTERNAL_CHANGE, false, false));		}				private static function notifyChangeView():void {			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.CHANGE_VIEW, false, false));		}				private static function notifyChangeLanguage():void {			dispatchEvent(new DeeplinkEvent(DeeplinkEvent.CHANGE_LANGUAGE, false, false));		}				public static function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = true):void {			_readings = 0;			_dispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference);		}				public static function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void {			_readings = 0;			_dispatcher.removeEventListener(type, listener, useCapture);		}				public static function removeAllEventListener():void {			return _dispatcher.removeAllEventListener();		}				public static function dispatchEvent(event:Event):Boolean {			return _dispatcher.dispatchEvent(event);		}				public static function hasEventListener(type:String):Boolean {			return _dispatcher.hasEventListener(type);		}				public static function willTrigger(type:String):Boolean {			return _dispatcher.willTrigger(type);		}				public static function createViews(xml:XML):void {			registerViews(new Header(xml, null));		}				public static function registerViews(header:Header, _firstView:* = null):void {			validateHeader(_header = header);			_firstView = _header.getView(_firstView) || standardView;			_dispatcher = new EventControl();			_history = new Array();			setLanguage(standardLanguage);			setView(_firstView.branch);			setHistory(header.history);			setStrict(header.strict);			setTracker(header.track);			setTitle(header.title);		}				public static function initialize():void {			validateHeader(header);			if (!Browser.hash) {				setValue(BranchUtils.arrange(language.branch + '/' + view.branch + getQueryString()));			}			SWFAddress.addEventListener(SWFAddressEvent.INIT, onInit);			SWFAddress.addEventListener(SWFAddressEvent.CHANGE, onChange);			SWFAddress.addEventListener(SWFAddressEvent.INTERNAL_CHANGE, onInternalChange);			SWFAddress.addEventListener(SWFAddressEvent.EXTERNAL_CHANGE, onExternalChange);			notifyChangeLanguage();			notifyChangeView();		}				public static function setValue(value:*):void {			validateHeader(header);			value = BranchUtils.arrange(value);			var path:String = BranchUtils.cleanup(value);			var query:String = BranchUtils.getQueryString(value, true);			var section:View, suffix:String = new String();			setLanguage(path);			path = path.split(language.branch).join('');			path = isStrictPath(path) ? standardView.branch : path;			section = header.getView(path) || view;			if (path.indexOf(section.branch) > -1) {				path = BranchUtils.trimQueryString(path);				suffix = path.substr(path.indexOf(section.branch) + section.branch.length, path.length);			}			SWFAddress.setValue(BranchUtils.arrange(language.branch + '/' + section.branch + suffix + query));		}				public static function setTitle(title:String, delimiter:String = null):void {			_title ||= title ||= 'AdFramework';			if (delimiter != null) {				_delimiter = delimiter;				for each (var crumb:String in getPathNames()) {					title += delimiter + crumb;				}			}			SWFAddress.setTitle(title);		}				public static function back():void {			if (_index > 0) {				_index--;				if (_history[_index]) {					setValue(_history[_index]);					//SWFAddress.back();				}				else {					setValue(standardView.branch);					//SWFAddress.back();				}			}		}				public static function forward():void {			if (_index < _history.length - 1) {;				setValue(_history[++_index]);				//SWFAddress.forward();			}		}				public static function isStrictPath(value:*):Boolean {			validateHeader(header);			if (value && value is String) {				value = value.split(language.branch).join('');				value = BranchUtils.arrange(value, false).toLowerCase();			}			return (value == views.root.branch || value == '/home/' || value == '/' || value == '');		}				public static function setHistory(history:Boolean):void {			SWFAddress.setHistory(history);		}				public static function setStatus(status:String):void {			SWFAddress.setStatus(status);		}				public static function resetStatus():void {			SWFAddress.resetStatus();		}				public static function setStrict(strict:Boolean):void {			SWFAddress.setStrict(strict);		}				public static function setTracker(tracker:String):void {			SWFAddress.setTracker(tracker);		}				public static function popup(url:String, name:String = 'popup', options:String = '""', handler:String = ''):void {			SWFAddress.popup(url, name, options, handler);		}				public static function href(url:String, target:String = '_self'):void {			SWFAddress.href(url, target);		}				public static function go(delta:int):void {			SWFAddress.go(delta);		}				public static function up():void {			SWFAddress.up();		}				public static function call(jsFunction:String, ...rest:Array):* {			Browser.call.apply(null, [jsFunction].concat(rest));		}				public static function setView(value:*):View {			var section:View;			if (value != null) {				validateHeader(header);				if (value is String) {					value = BranchUtils.arrange(value);					value = isStrictPath(value) ? standardView.branch : value;					value = value.split(language.branch).join('');				}				section = header.getView(value) || mistakeView;				if (section) {					var suffix:String = new String();					if (value is String && value.indexOf(section.branch) > -1) {						suffix = value.substr(value.indexOf(section.branch) + section.branch.length, value.length);					}					if (view) {						if (section.branch != view.branch) {							_lastView = _view;							_view = section;							_history[_index++] = BranchUtils.arrange(language.branch + '/' + view.branch + suffix);							_readings++;							setTitle(view.title, _delimiter);							notifyChangeView();						}					} else {						_lastView = section;						_view = section || mistakeView;						_history[_index++] = BranchUtils.arrange(language.branch + '/' + view.branch + suffix);						_readings++;						setTitle(view.title, _delimiter);						notifyChangeView();					}				}			}			return section;		}				public static function setLanguage(value:*):Language {			var locale:Language, history:Boolean;			if (value) {				validateHeader(header);				locale = languages.getLanguage(value);				if (locale) {					locale = locale.tree;					if (language) {						if (locale.branch != language.branch) {							_language = locale;							notifyChangeLanguage();						}					} else {						_language = locale;						notifyChangeLanguage();					}				} else {					history = getHistory();					setHistory(false);					setValue(BranchUtils.arrange(language.branch + '/' + view.branch));					setHistory(history);				}			}			return locale;		}				public static function getQueryString(path:String = null):String {			return BranchUtils.getQueryString(path || Browser.href);		}				public function hasQueryString(path:String = null):Boolean {			return getQueryString(path) != null;		}				public static function getTitle():String {			return SWFAddress.getTitle();		}				public static function getParameter(parameter:String):String {			return SWFAddress.getParameter(parameter) as String;		}				public static function getParameterNames():Array {			return SWFAddress.getParameterNames();		}				public static function get parameters():Object {			return Browser.queryString;		}				public static function getPath():String {			return SWFAddress.getPath();		}				public static function getPathNames():Array {			return SWFAddress.getPathNames();		}				public static function getValue():String {			return SWFAddress.getValue();		}				public static function getBaseURL():String {			return SWFAddress.getBaseURL();		}				public static function getHistory():Boolean {			return SWFAddress.getHistory();		}				public static function getStatus():String {			return SWFAddress.getStatus();		}				public static function getTracker():String {			return SWFAddress.getTracker();		}				public static function get standardView():View {			return header ? views.getView(views.root.standard) : null;		}				public static function get mistakeView():View {			return header ? views.getView(views.root.mistake) : null;		}				public static function get standardLanguage():Language {			return languages ? languages.getLanguage(languages.standard) : null;		}				public static function get languages():Language {			return header ? header.languages : null;		}				public static function get views():View {			return header ? header.views : null;		}				public static function get readings():uint {			return _readings;		}				public static function get header():Header {			return _header;		}				public static function get lastView():View {			return _lastView;		}				public static function get view():View {			return _view;		}				public static function get language():Language {			return _language;		}				public static function get history():Array {			return _history.slice();		}				public static function clearHistory():void {			var id:int = _history.length;			while (id--) {				_history.splice(id, 1);			}		}				public static function dispose(flush:Boolean = false):void {			SWFAddress.removeEventListener(SWFAddressEvent.INTERNAL_CHANGE, onInternalChange);			SWFAddress.removeEventListener(SWFAddressEvent.EXTERNAL_CHANGE, onExternalChange);			SWFAddress.removeEventListener(SWFAddressEvent.CHANGE, onChange);			SWFAddress.removeEventListener(SWFAddressEvent.INIT, onInit);			removeAllEventListener();			clearHistory();			if (flush) {				_lastView = null;				_view = null;				_dispatcher = null;				_history = null;				_delimiter = null;				_title = null;			}		}	}}