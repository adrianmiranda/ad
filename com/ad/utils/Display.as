package com.ad.utils {	import flash.events.Event;	import flash.display.DisplayObject;	import flash.display.StageScaleMode;	import flash.display.StageAlign;	import flash.display.Stage;	import flash.geom.Rectangle;	import flash.utils.Dictionary;		public final class Display {		public static const TOP:int = 1;		public static const CENTER:int = 2;		public static const BOTTOM:int = 3;		public static const MIDDLE:int = 4;		public static const LEFT:int = 5;		public static const RIGHT:int = 6;		public static const NONE:int = 0;				private static var displayDictionary:Dictionary = new Dictionary(true);		private static var bounds:Rectangle;		private static var stage:Stage;		private static var align:int;		private static var target:DisplayObject;				public function Display() {			// no yet implement		}				public static function attach(target:DisplayObject, state:uint, params:Object = null):void {			// no yet implement		}				public static function detach(target:DisplayObject):void {			// no yet implement		}				public static function get screenAlign():String {			return (stage ? stage.align : StageAlign.TOP_LEFT);		}				public static function get screenScaleMode():String {			return (stage ? stage.scaleMode : StageScaleMode.NO_SCALE);		}				public static function get screen():Rectangle {			return (stage ? new Rectangle(0, 0, stage.stageWidth, stage.stageHeight) : null);		}				private static function initialize(event:Event):void {			event.currentTarget.removeEventListener(Event.ADDED_TO_STAGE, initialize);			position(event.currentTarget as DisplayObject);		}				private static function arrange(event:Event):void {			for (var target:String in displayDictionary) {				position(displayDictionary[target]);			}		}				private static function position(target:DisplayObject, ...rest:Array):void {			if (!stage) {				if (target.stage) stage = target.stage;				else {					target.addEventListener(Event.ADDED_TO_STAGE, initialize);					return;				}			}			var x:Number = 0;			var y:Number = 0;			switch (align) {				case CENTER:					x += 0;					break;				case RIGHT:					x += 0;					break;				case MIDDLE:					y += 0;					break;				case BOTTOM:					y += 0;					break;				case NONE:					x += target.x;					y += target.y;			}			target.x = x;			target.y = y;		}	}}